#include <Servo.h>

// Arduino pin assignment
#define PIN_LED   9   // LED active-low
#define PIN_TRIG  12  // sonar sensor TRIGGER
#define PIN_ECHO  13  // sonar sensor ECHO
#define PIN_SERVO 10  // servo motor

// configurable parameters for sonar
#define SND_VEL 346.0     // sound velocity at 24 celsius degree (unit: m/sec)
#define INTERVAL 25      // sampling interval (unit: msec)
#define PULSE_DURATION 10 // ultra-sound Pulse Duration (unit: usec)
#define _DIST_MIN 180.0   // minimum distance to be measured (unit: mm)
#define _DIST_MAX 360.0   // maximum distance to be measured (unit: mm)

#define TIMEOUT 15000
#define SCALE (0.001 * 0.5 * SND_VEL) // coefficent to convert duration to distance

#define _EMA_ALPHA 0.3    // EMA weight of new sample (range: 0 to 1)
                          // Setting EMA to 1 effectively disables EMA filter.

#define _DUTY_MIN 500
#define _DUTY_MAX 2500

float dist_ema = _DIST_MAX;
float dist_prev = _DIST_MAX;
unsigned long last_sampling_time = 0;

Servo myservo;

void setup() {
  pinMode(PIN_LED, OUTPUT);
  pinMode(PIN_TRIG, OUTPUT);    // sonar TRIGGER
  pinMode(PIN_ECHO, INPUT);     // sonar ECHO
  digitalWrite(PIN_TRIG, LOW);  // turn-off Sonar 

  myservo.attach(PIN_SERVO);
  myservo.writeMicroseconds(_DUTY_MIN);

  // initialize serial port
  Serial.begin(57600);
}

void loop() {
  if (millis() < last_sampling_time + INTERVAL)
    return;

  float dist_raw = USS_measure(PIN_TRIG, PIN_ECHO);
  float dist_filtered;

  // 범위 필터
  if ((dist_raw == 0.0) || (dist_raw < (_DIST_MIN - 20)) || (dist_raw > (_DIST_MAX + 20))) {
    dist_filtered = dist_prev;
  } else {
    dist_filtered = dist_raw;
    dist_prev = dist_raw;
  }

  // EMA 필터
  dist_ema = _EMA_ALPHA * dist_filtered + (1.0 - _EMA_ALPHA) * dist_ema;

  // 거리(mm)를 각도로 변환
  float angle;
  if (dist_ema <= _DIST_MIN) {
    angle = 0.0;
  } else if (dist_ema >= _DIST_MAX) {
    angle = 180.0;
  } else {
    angle = (dist_ema - _DIST_MIN) * 180.0 / (_DIST_MAX - _DIST_MIN);
  }

  // 서보 제어
  int duty = map(angle, 0, 180, _DUTY_MIN, _DUTY_MAX);
  myservo.writeMicroseconds(duty);

  // LED 제어
  if (dist_filtered >= _DIST_MIN && dist_filtered <= _DIST_MAX)
    digitalWrite(PIN_LED, LOW);
  else
    digitalWrite(PIN_LED, HIGH);

  // Serial 출력
  Serial.print("Raw(mm): ");   Serial.print(dist_raw);
  Serial.print("  EMA(mm): "); Serial.print(dist_ema);
  Serial.print("  Angle: ");   Serial.print(angle);
  Serial.print("  Duty: ");    Serial.println(duty);

  last_sampling_time += INTERVAL;
}

float USS_measure(int TRIG, int ECHO) {
  digitalWrite(TRIG, HIGH);
  delayMicroseconds(PULSE_DURATION);
  digitalWrite(TRIG, LOW);

  return pulseIn(ECHO, HIGH, TIMEOUT) * SCALE; // mm 단위
}
